# Generated with protoc-gen-openapi
# https://github.com/pubgo/protoc-gen-openapi

openapi: 3.0.3
info:
    title: openapi
    version: 0.0.1
servers:
    - url: https:8080
paths:
    /files/{filename}:
        post:
            tags:
                - Id
            operationId: Id_UploadDownload
            parameters:
                - name: filename
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: string
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        '*/*': {}
    /id/echo:
        post:
            tags:
                - IdProxy
            operationId: IdProxy_Echo
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EchoReq'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/EchoRsp'
    /id/generate:
        post:
            tags:
                - Id
            description: Generate 生成ID
            operationId: Id_Generate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GenerateRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GenerateResponse'
    /id/types/{name}/{nameId}:
        get:
            tags:
                - Id
            description: Types id类型
            operationId: Id_Types
            parameters:
                - name: name
                  in: path
                  required: true
                  schema:
                    type: string
                - name: nameId
                  in: path
                  required: true
                  schema:
                    type: string
                - name: hello
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TypesResponse'
        put:
            tags:
                - Id
            operationId: Id_PutTypes
            parameters:
                - name: name
                  in: path
                  required: true
                  schema:
                    type: string
                - name: nameId
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TypesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TypesResponse'
    /id/types1:
        get:
            tags:
                - Id
            description: 返回流
            operationId: Id_TypeStream
            parameters:
                - name: name
                  in: query
                  schema:
                    type: string
                - name: nameId
                  in: query
                  schema:
                    type: string
                - name: hello
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TypesResponse'
    /proxy/test:
        get:
            tags:
                - Id
            operationId: Id_DoProxy
            responses:
                "200":
                    description: OK
                    content: {}
    /ws/chat:
        post:
            tags:
                - Id
                - chat/test/tag
                - chat/test/tag1
            summary: 聊天
            description: 聊天
            operationId: Id_Chat
            parameters:
                - name: name
                  in: query
                  schema:
                    type: string
                - name: sessionId
                  in: query
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Message'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ChatMessage'
components:
    schemas:
        ChatMessage:
            type: object
            properties:
                name:
                    type: string
                sessionId:
                    type: string
                msg:
                    $ref: '#/components/schemas/Message'
        EchoReq:
            type: object
            properties:
                hello:
                    type: string
        EchoRsp:
            type: object
            properties:
                hello:
                    type: string
        GenerateRequest:
            type: object
            properties:
                type:
                    enum:
                        - default
                        - uuid
                        - snowflake
                        - bigflake
                        - shortid
                    type: string
                    default: default
                    description: type of id e.g uuid, shortid, snowflake (64 bit), bigflake (128 bit)
                    format: enum
            description: Generate a unique ID. Defaults to uuid.
        GenerateResponse:
            type: object
            properties:
                id:
                    type: string
                    description: the unique id generated
                type:
                    type: string
                    description: the type of id generated
        Message:
            type: object
            properties:
                name:
                    type: string
                text:
                    type: string
        TypesRequest:
            type: object
            properties:
                name:
                    type: string
                nameId:
                    type: string
                hello:
                    type: string
            description: List the types of IDs available. No query params needed.
        TypesResponse:
            type: object
            properties:
                types:
                    type: array
                    items:
                        type: string
            description: TypesResponse 返回值类型
tags:
    - name: Id
      description: Id 生成随机ID服务
    - name: IdProxy
